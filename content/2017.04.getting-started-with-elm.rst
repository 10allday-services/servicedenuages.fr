Getting started with Elm
########################

:lang: en
:date: 2017-04-13
:url: getting-started-with-elm
:summary: What is Elm? how does it work? How can I try it really fast?


Introduction
============

The past two weeks we have been traveling and meeting a bunch of
developers.

It was a chance for us to tell them about Elm through talks at
conferences and to present a short one-hour workshop.

You can find the slides of the two talks here:

- `a short introduction to Elm by Niko <http://slides.com/n1k0/elm>`_
- `Talking JSON with Elm by Natim <http://natim.github.io/django-slides/elm-json/>`_

However, this article is a summary of the take aways of this workshop
for those who would like to know a bit more about Elm.


What is Elm and why should I be interested?
===========================================

Elm is a toolkit that is focused on making sure your app state and the
HTML that reflects it are always in sync.

If you have been doing any frontend development during the last couple
of years, you might have seen that the JavaScript ecosystem is a bit
wild. Keeping up-to-date with the growing number of competing
frameworks can take a lot of energy, not to mention trying your app on
all the available browser versions to make sure it works well
everywhere. Training a team to build an app with React.js,
Angular2.js, Vue.js or Ember.js as well as looking for the right
boilerplate to get started with your project are good examples of how
hight the frustration that the constant reinvention of the ecosystem
causes can be.

On the other hand, writing tests for the front-end can be tedious and
supporting Flow or TypeScript can prove to be yet another layer to
handle in your stack.

If you are already up-to-speed with all those stacks, then you should
probably keep using them. However if you don't know which one to
choose and you are looking for a painless way to build frontend
applications, read on.


How is Elm different?
=====================

First of all, using Elm, the two lines it takes to load your app is
all the JavaScript you will write. Your application will be written in
Elm and compiled into JavaScript.

All the mistakes you will do will be caught at compilation, which
means that you will not have errors when running your app in the
browser.

Because you will have a compilation step, Elm will force you to handle
every possible case of your model state. It will make sure you covered
them on the rendering side.

The tooling is great. ``elm-live`` will automatically update the
browser code to reflect your code update in realtime. You have a
debugger that will show you the list of events and show you the state
of your application at a given time. You can even go back in time and
replay events. ``elm-format`` will also format your code automatically
to avoid fighting over coding styles.


Getting started
===============

Installing Elm
--------------

First of all install ``elm`` and ``elm-format`` using npm the node
package manager:

.. code-block:: bash

    npm install -g elm elm-format

What is npm? How to install it?
-------------------------------

npm is the node package manager. To install it, you might want to use
`nvm <https://github.com/creationix/nvm#install-script>`_.

Once nvm is installed, you can use::

    nvm install node

And then you wil be able to run the previous ``npm`` command.

Looking for an IDE?
-------------------

Have a look at `Atom <https://atom.io/>`. By default it will run
``elm-format`` each time you save your file which is really handy.

Take a few moments to make sure your text editor is configured to work
friendly with Elm files.


Starting your first project
===========================

No need for a boilerplate here, you can just start by running
``elm-package install`` and approve the plan:

.. code-block:: bash

    ~/tutorial$ elm-package install

    Some new packages are needed. Here is the upgrade plan.

      Install:
        elm-lang/core 5.1.1
        elm-lang/html 2.0.0
        elm-lang/virtual-dom 2.0.4

    Do you approve of this plan? [Y/n] Y
    Starting downloads...

      ● elm-lang/html 2.0.0
      ● elm-lang/virtual-dom 2.0.4
      ● elm-lang/core 5.1.1

    Packages configured successfully!

You now have a ``elm-package.json`` in your project as well as a
``elm-stuff/`` directory that contains libraries ``elm-package``
installed.

.. code-block:: bash

    ~/tutorial$ tree -L2
	.
    ├── elm-package.json
    └── elm-stuff
        ├── exact-dependencies.json
        └── packages

    2 directories, 2 files


Creating your first file
========================

No need for a boilerplate here, to get started you can simply create a
new file named ``Main.elm`` with the following:

.. code-block:: elm

    import Html
    main = Html.text "Hello world"

Playing with elm-format
-----------------------
	
If your editor is well configured with ``elm-format``, you should see
this as soon as you save it:

.. code-block:: elm

    module Main exposing (..)
    
    import Html
    
    
    main =
        Html.text "Hello world!"

If not, you can run ``elm-format`` manually on your file:

.. code-block:: bash

    ~/tutorial$ elm-format Main.elm
    This will overwrite the following files to use Elm's preferred style:

        Main.elm

    This cannot be undone! Make sure to back up these files before proceeding.

    Are you sure you want to overwrite these files with formatted versions? (y/n)

    y
    Processing file Main.elm

To avoid having to answer yes each time you can use the ``--yes`` parameter::

    elm-format --yes Main.elm


Opening your app in the browser
-------------------------------

One way to run your app is to use ``elm-reactor``.

.. code-block:: bash

    ~/tutorial$ elm-reactor
	elm-reactor 0.18.0
    Listening on http://localhost:8000

Then open: http://localhost:8000/Main.elm

You are now viewing your Elm app live!!!


Learning about the Elm virtual DOM
==================================

The Elm Virtual DOM, functions to generate HTML are in the ``Html``
module.

If you want you can import all of it in your module using:

.. code-block:: elm

    import Html exposing (..)

You can then use ``text`` directly for instance:

.. code-block:: elm

    main = text "Hello world"

The Virtual DOM HTML nodes take two parameters:

- A list of attributes for the node
- A list of children for the node

If I want to create a ``div`` with a link it would look like this:

.. code-block:: elm

    module Main exposing (..)

    import Html exposing (..)
    import Html.Attributes exposing (..)


    main =
        div
            [ class "container" ]
            [ a
                [ href "http://www.servicedenuages.fr/" ]
                [ text "Blog" ]
            ]

We can also create a list of links in our div:

.. code-block:: elm

    module Main exposing (..)

    import Html exposing (..)
    import Html.Attributes exposing (..)


    main =
        div
            [ class "container" ]
            [ ul
                [ class "links" ]
                [ li
                    []
                    [ a
                        [ href "http://www.servicedenuages.fr/" ]
                        [ text "Blog" ]
                    ]
                , li
                    []
                    [ a
                        [ href "http://www.elm-lang.org/" ]
                        [ text "Elm lang" ]
                    ]
                ]
            ]


Adding some state
=================

Now that you know how to render your page in HTML, it is time to start
a program that knows how to handle events.

The way Elm handles that is by having:

- a ``Model``, an Elm record: a bit like a JavaScript object with
  properties, that keep the state of the app,
- an update function that will handle all the app events
- a view function that will return the Virtual DOM that matches the state.

The events and their params are defined in a ``Msg`` type. It is a bit
like a enum that would take parameters.

In order to do that we can use the ``beginnerProgram`` from the Html package:

.. code-block:: elm

    module Main exposing (..)
    
    import Html exposing (..)
    
    
    type Msg
        = Noop
    
    
    type alias Model =
        { name : String }
    
    
    main =
        beginnerProgram { model = { name = "Rémy" }, view = view, update = update }
    
    
    update : Msg -> Model -> Model
    update msg model =
        model
    
    
    view : Model -> Html Msg
    view model =
        text ("Hello " ++ model.name)

We can now handle an event and change the name when we click on it.

.. code-block:: elm

    module Main exposing (..)

    import Html exposing (..)
    import Html.Attributes exposing (..)
    import Html.Events exposing (..)


    type Msg
        = Switch


    type alias Model =
        { name : String }


    main =
        beginnerProgram { model = { name = "Rémy" }, view = view, update = update }


    update : Msg -> Model -> Model
    update msg model =
        case msg of
            Switch ->
                { model | name = "Séverine" }


    view : Model -> Html Msg
    view model =
        div []
            [ text "Hello "
            , a [ href "#", onClick Switch ] [ text model.name ]
            ]

You can refresh the page and try it.

If we want to switch back to ``Rémy`` when we click on ``Séverine`` we can add a ``if``:

.. code-block:: elm

    module Main exposing (..)

    import Html exposing (..)
    import Html.Attributes exposing (..)
    import Html.Events exposing (..)


    type Msg
        = Switch


    type alias Model =
        { name : String }


    main =
        beginnerProgram { model = { name = "Rémy" }, view = view, update = update }


    update : Msg -> Model -> Model
    update msg model =
        case msg of
            Switch ->
                if model.name == "Rémy" then
                    { model | name = "Séverine" }
                else
                    { model | name = "Rémy" }


    view : Model -> Html Msg
    view model =
        div []
            [ text "Hello "
            , a [ href "#", onClick Switch ] [ text model.name ]
            ]


Conclusion
==========

That's about it. You now know more than you think about Elm. I hope
you try it in a small project and start to like it as much as we do.

If you want to learn more about it, don't hesitate to look at some of
our projects or ask questions on the #kinto chan.

- https://github.com/n1k0/myshows
- https://github.com/leplatrem/systemaddons-versions
- https://github.com/addons-shipping/stepfunction-dashboard/
- https://github.com/Natim/twitter-elm-wall/
- https://github.com/kinto/kinto-alwaysdata/
- https://github.com/Natim/social-dashboard/
