Building software as a way to learn
###################################

:slug: building-software-as-a-way-to-learn
:date: 2017-03-15
:lang: en
:url: building-software-as-a-way-to-learn
:summary:
    Having multiple people working on a big project is not as easy as it seems.
    Here are some elements to move projects forward as a team.


Today, I realized that I've been working for Mozilla for three years
already.

I've learned a lot, and with the storage team we have been part of a
number of different projects:

- Firefox Hello: Building a WebRTC signaling service.
- MSISDN auth: Building a password less BrowserID authentication
  service using a phone number.
- Syncto: Browsing Firefox Sync using the Kinto protocol.
- Kinto: Building synchronization services with backup and sharing capability in mind.
- RemoteServiceWorker: Building a Firefox Service Worker in the cloud
- WebPush channels: Building a PubSub on top of WebPush

While most of these projects have been built, deployed in production
and eventually decommissined, some of them are still actively use by
Firefox users everyday.


How do you keep motivated building things that are thrown away?
===============================================================

Let's be honest, everything we build: cars, houses, and even softwares
are meant to be eventually thrown away. That's why recycling is so
important.

The question is why do we keep building them nevertheless.

Our daily job is to help Mozilla make the web a safe place for users
and prevent big companies to turn them into advertisement products
without their consent.

One way of doing so is to build software that empower people to use
internet while being in charge of their own data.

When users give their data to big companies, they are given them
leverage. In the meantime these companies are offering a service that
solve people problems, and they get addicted to it and come back for
more.

We alone cannot compete with companies that are spending millions of
dollars building great products to capture users.

However, we can build software that, in one hand, is useful for the
Mozilla mission and makes us reactive to fix Mozilla issues while
building Firefox, and in the other hand enpower developers to build
great software where users choose where they want to store their data.

What matters rather than building software is the vision that this
software carries.

Writting lines of code is cheap and fast. You can build a prototype in
two weeks and iterate until you are happy with the result.

Then it might be use by some people and it might get some traction for
few months or few years and it will be eventually forgotten in a git
repository somewhere forever.

Writting software to solve problems is not enough, to keep motivated
on the long term.

Our understanding is that you need a greater goal than just writting
code.

For us the answer to that question is: what can we learn while
building software that can be useful for us and for our community to
help us go faster and build more robust software later.

For Mozilla the answer to that question is: How do I improve Firefox
so that people want to use it as their main browser?

Both answer are goals that we set to ourselves and we are using
software development to reach them.

Mozilla is calling that the True North, we are calling it a vision,
some other people might call it an utopia.

In both cases that vision should set the route of our ambition and give
people a aim to all look in the same direction.


How do you turn this vision into OKRs?
======================================

OKR means **Objectives and Key results**, it is a way to define
tangible objectives and key results. You can then look at the results
to tell if you were able to achieve your objectives.

It is also a way to cut your vision in steps and to move your vision
forward.

OKR should be defined for quite short period of time to stay agile and
be able to adapt to new environment constraints.

At Mozilla we define quaterly OKRs.


How do you set course on a vision?
==================================

To be able to define OKR from your vision, you need to be able to find
the fastest way to get closer to your aim, however what we can learn
from sailing is that the fastest way is rarely the shortest.

At Mozilla, we have a vision that is written down in the
`Mozilla Manifesto <https://www.mozilla.org/en-US/about/manifesto/>`_.

Mitchell Baker does a great job making sure everyone at Mozilla stays
aligned with that vision.

However agreeing on the fastest way and turning the Mozilla vision
into OKR is really challenging and even more when you have a thousand
people opinion about it.

That's the board job to set course every six months (or even less) on
what we should be focusing on for the next six months.

This often means changing our course and killing projects or at least
putting them on the side if team are turning over to new priorities.


Our chance is opensource
========================

The chance we have at Mozilla, is that everything we do is published
as Free, Libre, Opensource Software, which means that, even if, as
Mozilla employee, we focus on something else, the work we've done is
still available for the community to care about it.

Thunderbird is an example of this, Mozilla stopped spending resources
on it in September 2007 but ten years later Mozilla Thunderbird is
still actively used by a large number of users everyday.

When building software we solve complex issues and all the solutions
we have put together while doing so are really useful for other people
that might need to solve similar problems.

- Mozilla Persona lead the ground for Firefox Account and the Portier
  broker.
- The Firefox Hello loop server is a good example of how to build a
  WebRTC signaling server.
- The RemoteServiceWorker projects shows how to use Python 3 asyncio
  to handle a large pool of websockets using redis to route messages
  between them.


Prototyping as a way to learn
=============================
  
More than writting lines of code, we are researching solutions to
complex problems at scale and turning solutions into, production
ready, experiments.

All this efforts are not lost because we learn a great deal from all
of them.

When we spend a month to one year building something, we are learning.

But everything you learn is useful only if you share it.


Sharing as a way to build software
==================================

In one sentence, what matters the most is to build software to put
your vision in motion and to share what you've learned along the way.

Luckily, there are people that you need to inform about what you are
doing and learning about: your colleagues.

You need to explain what you are trying to solve, you need to find out
how to solve the issue and agree on the solution you are putting
together, also having feedback will help you to choose the best
solution even before having written a single line of code.

Conclusion
==========

As a conclusion, don't build software to build software, build it to
solve people problems. Set a long term goal, work toward that goal and
iterate. Do not be afraid of killing things that don't work.

In the meantime, make the process of building software a way to learn
new things and share what you've learn. Then you don't have to worry
about your project to be decommissioned because you've already got the
take aways of building it.
  
Make the process of build software a way to share what you've learned.
