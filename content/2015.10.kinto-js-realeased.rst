Kinto.js 1.0 released
#####################

:lang: en
:url: kinto-js-1-0-released
:slug: kinto-js-1-0-released
:date: 2015-10-27
:summary: After months of development, we're proud to announce the release of Kinto.js 1.0.0 stable.

Kinto.js_ is an offline-first JavaScript client leveraging the `Kinto API <https://kinto.readthedocs.org/>`_ for data synchronization. In a world where connectivity isn't always guaranteed, the priority given to local persistence in the browser has become a `first-class citizen <http://offlinefirst.org/>`_ for any webapp, especially on mobile.

The principle is simple; save your data locally as if there were no connectivity, and when it's available, push your local data to a remote server, retrieve remote changes, and reflect them locally:

.. code-block:: javascript

    const kinto = new Kinto({remote: "https://kinto.dev.mozaws.net/v1/"});
    const tasks = kinto.collection("tasks");

    tasks.create({label: "Test kinto.js", done: false})
      .then(_ => tasks.sync())
      .then(res => {
        if (res.ok) {
          alert("Data have been synchronized!");
        }
      });

XXX introduce the concept of collection

Kinto.js provides basic local CRUD operations for `creating <https://kintojs.readthedocs.org/en/latest/api/#creating-a-record>`_, `updating <https://kintojs.readthedocs.org/en/latest/api/#updating-a-record>`_, `deleting <https://kintojs.readthedocs.org/en/latest/api/#deleting-records>`_, `retrieving <https://kintojs.readthedocs.org/en/latest/api/#retrieving-a-single-record>`_ and `listing <https://kintojs.readthedocs.org/en/latest/api/#listing-records>`_ records from the local database. Each time you want to reflect its state to a remote server, you only have a `single method <https://kintojs.readthedocs.org/en/latest/api/#fetching-and-publishing-changes>`_ to call: ``sync()``!

We've set up a `simple demo application <https://kinto.github.io/kinto.js/>`_ leveraging a public Mozilla test server instance, so you can check how it behaves by yourself if you're interested. The source code of this app is `available on Github <https://github.com/Kinto/kinto.js/blob/66ef077796a8e4a8b0d9a95389a61ea57cbbfde3/demo/demo.js>`_, and is also the base use case for the `Kinto.js tutorial <http://kintojs.readthedocs.org/en/latest/tutorial/>`_ you should probably take if you want to get your feet wet.

.. note::

   The public Kinto test server instance is flushed every morning at 7AM UTC, so don't rely on it for production use ;)

Local persistence in the browser is achieved using IndexedDB_, and we've tried hard to hide its inherent low-level usage complexity — mainly due to its fully asynchronous nature — through a simpler yet convenient Promises_ based API.

Synchronizing and reconciling data
----------------------------------

kintojs-sync-flow.png

Synchronizing local and remote data is a tough topic, and conflicts may occur quite easily if things are changing often from different sources (think multiple devices updating a same server); Kinto.js supports three distinct *synchronization strategies* to handle such a situation:

- The server is authoritative: all conflicting records are overriden locally by their version from the server;
- The client is authoritative: all conflicting records are resolved using their local versions, and force-pushed to the server;
- No party is authoritative: the synchronization flow is halted, and all conflicting records are explicitely exposed, so developers can then decide how they want resolve each of them individually.

You can read more about `conflict resolution <https://kintojs.readthedocs.org/en/latest/api/#resolving-conflicts-manually>`_ and `sychronization strategies <http://kintojs.readthedocs.org/en/latest/api/#synchronization-strategies>`_ in the dedicated sections of the project documentation.

A case for encryption
---------------------

XXX

Current limitations
-------------------

XXX

The future of Kinto.js
----------------------

Of course 1.0 is a very first step towards a broader goal; foremost, we absolutely want to support bulk updates leveraging IndexedDB transactions, for performance and consistency purposes.

So stay tuned for next upcoming releases, and feel free to provide any feedback in the meanwhile :)

.. _IndexedDB: https://www.w3.org/TR/IndexedDB/
.. _Kinto.js: https://kintojs.readthedocs.org/
.. _Promises: https://www.promisejs.org/
