How to make the Kinto instances discoverable?
#############################################

:slug: outreachy-discovery-of-kinto-servers
:date: 2015-11-27
:lang: en
:url: discovery-of-kinto-servers
:summary:
    The solutions that can be used to make Kinto instances discoverable.

.. epigraph::

   About me: 
	
   Hi! I am Shweta Oak. I got the opportunity to be a part of Mozilla's Kinto team. 
   Here, my work focuses on the discovery of Kinto servers. 
   I am passionate about Technology and believe in applying it to enhance the lives of people.
   I like to solve problems. When solving problems I try to understand the problem first and 
   believe in crafting solutions that address the problem. 
   I am enthusiastic about taking up new challenges, learning new things and discovering my potential. 
   
   Why I chose to work on Kinto

   I have previously worked on a project that integrates APIs of social networking accounts/ websites. 
   I read up about Kinto, and found the idea of having a storage instance for accounts quite intriguing. 
   I read up more on it, and wanted to work on it. 

What Kinto does that is not done yet...
=======================================

The differences I observed between Kinto and such existing solutions are:

* ­Decentralized discovery of Kinto instances.
* Fine grained permissions can be imposed on records, collections and buckets which follow a hierarchy.
* Kinto provides for Synchronization. Applications can synchronize data on different devices.
* Multiple clients can access a server in case of a shared resource.
* If an application makes some change, while offline, these changes will be reflected when connection is established back.


Decentralization and Discovery 
===============================

The Kinto project aims to bring storage instances to everyone, attached to their Firefox Accounts. Currently, Kinto is thought of as a centralized server and everyone authenticates on one instance. Items are shared between users of a same instance. Having multiple services is a good thing for many reasons: it's easier to scale, and allows the users to chose where its data is hosted. It also makes it easy to exchange and make use of information.

For instance, imagine Alice and Bob. Bob is using Mozilla's servers to store his data, whereas Alice deployed her own Kinto instance.

There are different use cases:

* Alice wants to use `Routina <https://github.com/leplatrem/routina>`_, an
  application that stores its data inside a Kinto instance. As such, Routina
  needs a way to discover where it should store its data, and send the requests
  to this server.
* Bob and Alice want to collaborate on a set of data (think about a webapp to
  manage their shared expenses). There should be a way for Alice to host
  everything and grant access to Bob on her data. The webapp should be able to
  use the correct server.

Discovery is a the process of turning a small piece of information (like a user ID) into the URLs and APIs needed to service some specific request. 
Webfinger and Host-Meta are two possible ways to answer the discovery of instances, let's see the differences between the two.

Webfinger vs Host Meta
======================

Webfinger:

Webfinger is a new internet protocol, like SMTP (email) or HTTP (the web) that gives us the ability to share information about ourselves, and discover things about our friends, without having to remember lots of confusing web addresses.
With Webfinger you can make personal or professional information about you or your organization discoverable through email addresses. Several well-known web service providers have implemented Webfinger for their customers' profiles, but if you manage your own mail server, it may take a little time.
WebFinger is used to discover information about entities on the Internet that are identified by a URI using standard HTTP methods over a secure transport. A WebFinger resource returns a JSON object describing the entity that is queried.

 
The advantage of webfinger is that the Kinto server can be discovered from the scratch using just a self-hosted email address.

The flow discovery of a kinto server would be:
	1. Create a central repository about the location of the server.
	2. The user specifies the location of its server on the client side.
	3. A Webfinger request is done on the domain to locate the server. Two scenarios may occur:      
	     Wefinger is supported by the domain:
	     WebFinger services are hosted by wf.example.net.  Suppose a client issues a query for
	     acct:alice@example.com like this:

	     GET /.well-known/webfinger?
		           resource=acct%3Aalice%40example.com HTTP/1.1
	     Host: example.com
		 The server might respond with this:

	     HTTP/1.1 307 Temporary Redirect
	     Access-Control-Allow-Origin: *
	     Location: https://wf.example.net/example.com/webfinger?resource=acct%3Aalice%40example.com

 	     The client can then follow the redirection, reissuing the request to
	     the URI provided in the Location header.  Note that the server will
	     include any required URI parameters in the Location header value,
	     which could be different than the URI parameters the client
	     originally used.

	   * Webfinger is not supported:
	     Look up the central repository. Get the location of the server.
	4. It caches the location of the Kinto server and the location of the Host Meta server until there is a problem connecting with the Kinto instance, in that case it retries to get the information.

	 


Host Meta:

Host Meta is a method for locating host metadata as well as information about individual resources controlled by the host.
With Host Meta, the user will specify the location of the server serving the Host Meta file, which will contain information such as where the Kinto server is, this also has the possibility of adding some other server locations.
There is a need for a metadata document about a host, a document to hold actual protocol metadata. A feature of the host-meta proposal is the use of XRD as the document schema. This simplifies the protocols looking to use it as they all already require the ability to parse XRD documents. For example, this simple host-meta document for the ‘mozilla.org’ and ‘https://www.mozilla.org‘ hosts provides a link for host-wide copyright information and a link template providing a URI for obtaining resource-specific metadata for each resource within the host-meta document scope.

The flow for discovery of kinto servers would be something like:

1. The user specifies the location of its server on the client side.
2. The client then does a lookup on the server to find the location of the Kinto server, using Host Meta. For example something like this:
   https://www.mozilla.org/.well-known/host-meta
3. Get the Host Meta document which would look something like:
    <!-- NOTE: this host-meta end-point is a pre-alpha work in progress. Don't rely on it. →
    <XRD xmlns="http://docs.oasis-open.org/ns/xri/xrd-1.0"xmlns:hm="http://host-meta.net/xrd/1.0"><hm:Host xmlns="http://host-meta.net/		xrd/1.0">mozilla.com<hm:Host>																																<Link rel="lrdd" template="http://webfinger.mozillalabs.com/webfinger.php?q={uri}">
    <Title>Resource Descriptor</Title>
    </Link>
    </XRD>
4. Check the lrdd field. The template for obtaining resource specific metadata is present. 
5. Using this template, on inserting the {uri}, we can get the metadata of the kinto server.
6. It caches the location of the Kinto server and the location of the Host Meta server until there is a problem connecting with the Kinto instance, in that case it retries to get the information from the Host Meta.

 Creating the Host Meta site is one of the primary tasks. We can do this by having the Host Meta file generated statically by a script.  




Why is Host Meta a better solution?
===================================
The advantage of Host Meta over Webfinger is that a central repository is not needed. The central repository was needed in case Webfinger was not supported by a domain. But, using Host Meta, we get the template from the lrdd, that can be used irrespective of the Webfinger support.
In practice it would be easier to use a single account for FxA identity and it's easier to configure the Kinto server in client/app settings than to have to create an FxA account from a self-hosted mailserver and then a  webfinger host. 

