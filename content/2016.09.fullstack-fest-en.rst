I had the chance to go the Fullstack Fest 2016 — thanks Mozilla! — and really enjoyed it!

This blog post is an attempt to give you a summary and some feedback of what happened during this 4+1 days conference!


Huge applause!
==============

The `Codegram team <http://www.codegram.com>`_ did really really well! They raised the bar for tech conferences, every feedback I heard was extremely positive! Plus, Barcelona is a pleasant destination :)

Former RubyCon and FutureJS events were merged into one *fullstack* event, 2 days of backend talks, 1 gap day with social activites, and 2 days of frontend talks.

    Problems of Today, ideas from the future.

I must congratulate the organizers for the choice of speakers and topics. That's a huge challenge to captivate 500 persons during 5 days, and they did really well! And also a big up for the captioners!

.. image:: fullstackfest-venue.jpg
    :align: center


Trends
======

* Docker
* Amazon Lambda
* GraphQL
* Criticism of microservices
* Offline / high latency / decentralized Web
* Functional programming
* Machine learning
* Immutability
* React
* Virtual reality
* Physical Web

.. image:: fullstackfest-trends.jpg
    :align: center


One sentence summaries
======================

*The videos are already online! In order to help you choose which one to watch, here is the shortest summary I could come up with for each talk:*

Hardware is amazing, software is crap. Use parallelism and keep your data under your control — `Joe Armstrong <https://www.youtube.com/watch?v=itKFrXghGuA&index=2&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, Erlang's inventor.

Scale using «pods»: deploy several isolated stacks of your multitenant app ­— `Simon Eskildsen <https://www.youtube.com/watch?v=7UyDK2bDjc4&index=3&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, Shopify

Academical theory can help when designing distributed systems with high availability — `Ines Sombra <https://www.youtube.com/watch?v=bUlpp8_Mevk&index=4&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, Fastly

Improve efficiency and security using a unikernel: a kernel whose components are built specifically for your app — `Amir Chaudhry <https://www.youtube.com/watch?v=XNu2lze6jS0&index=5&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, Docker Inc

Instead of making X faster, do less of X ­— `Tobias Pfeiffer <https://www.youtube.com/watch?v=b9H9AtbxpPM&index=6&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, Bitcrowd

Docker containers are secure, as much as your best practices — `Ben Hall <https://www.youtube.com/watch?v=oANurUSaOFs&index=7&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, http://katacoda.com

Elixir provides high level abstractions that make Erlang awesome — `Saša Jurić <https://www.youtube.com/watch?v=Ba3aCm3A0o8&index=8&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, Aircloak

Unison is an experiment to bring a new programming paradigm focused on distributed computing and persistence — `Paul Chiusano <https://www.youtube.com/watch?v=f6yA3t0dO-k&index=10&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, Stage N

HTTP2 reduces latency. It's here, use it with a one liner in your server configuration — `Ole Michaelis <https://www.youtube.com/watch?v=CThgMRXS8w8&index=11&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, Jimdo

Scale by publishing pre-rendered content to S3 when your data source changes — `Tim Perry <https://www.youtube.com/watch?v=vUCr1oTtaKA&index=12&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, BBC

Use Amazon lambda as a very cheap and ultra-efficient scaling solution — `Austen Collins <https://www.youtube.com/watch?v=9IrFIobZUEA&index=13&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, serverless.com

Processing natural language can be very easy with simple tricks — `Duretti Hirpa <https://www.youtube.com/watch?v=vRb-El8hC-U&index=14&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, Slack

It is our responsability to decentralize access and assure durability of our data. Internet of hash = bittorrent + git — `Juan Benet <https://www.youtube.com/watch?v=jONZtXMu03w&index=15&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, ipfs.io

Enable GraphQL on your API and rely on smart clients to do the hard work of querying and caching — `Marc-Andre Giroux <https://www.youtube.com/watch?v=eD7kLFGOgVw&index=16&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, Shopify

Some insights about recommendation engines and machine learning techniques — `Brian Sam-Bodden <https://www.youtube.com/watch?v=SRnM_P_ygqI&index=17&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, Integrallis

Immutable UIs makes it simpler to improve durability, utility and beauty in your software architecture — `Lee Byron <https://www.youtube.com/watch?v=pLvrZPSzHxo&index=18&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, Facebook, author of Immutable.js

Elm applications have no runtime errors — `Jack Franklin <https://www.youtube.com/watch?v=rDQ22Yg3Fms&index=19&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, Songkick

With new versions of Ecmascript, asynchronuous programs will look more and more synchronuous — `Jafar Husain <https://www.youtube.com/watch?v=3pKNRgResq0&index=20&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, Netflix, author of Falcor

PostCSS and CSS modules are really helpful for building a libray of UI components — `David Wells <https://www.youtube.com/watch?v=j8eBXGPl_5E&index=21&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, Serverless

At last we have proper grids with CSS4 — `Jen Kramer <https://www.youtube.com/watch?v=axVw1Zduqn0&index=22&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, Hardvard University

Web apps have views, business logic and persistence, and everything is about improving the developer experience — `Luca Marchesini <https://www.youtube.com/watch?v=wtURpqTgtUs&index=23&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, Kuzzle

Om Next leverages Clojure to bring conventions for data immutability, data specifications and data routing — `António Nuno Monteiro <https://www.youtube.com/watch?v=Zb18iPjDgwM&index=24&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, Technische Universität Dresden

The OpenBCI project allows everyone to study brainwaves using a homemade helmet —  `Alex Castillo <https://www.youtube.com/watch?v=CSfUr3m0-w8&index=25&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, Netflix

Flow based programming via CycleJS allows you to design and debug your apps via a high level of abstraction — `André Staltz <https://www.youtube.com/watch?v=R-GzJgEccEQ&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc&index=27>`_, Futurice

CSP channels in Javascript are the best tooling when dealing with stream of data — `Vincenzo Chianese <https://www.youtube.com/watch?v=r7yWWxdP_nc&index=28&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, Apiary

Service workers allow us to forget about page loader, especially when submitting data — `Andrew Dunkman <https://www.youtube.com/watch?v=xs_QRqGZ8xQ&index=29&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, Harvest

Build your apps as if there were be accessed by Martian via a high-latency connection ­— `Slobodan Stojanovic <https://www.youtube.com/watch?v=7rlEidtXlZg&index=30&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, Cloud Horizon

WebAssembly allows native apps to be run by the browser VM in the same stack context as JavaScript — `Ben Smith <https://www.youtube.com/watch?v=vmzz17JGPHI&index=31&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, Google

Render a 2D UI with React within a 3D WebGL scene — `Massimiliano Mantione <https://www.youtube.com/watch?v=DfPPlakRvow&index=32&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, HyperFair

Virtual reality in the browser is here! — `Liv Erickson <https://www.youtube.com/watch?v=Ciqucr_Ww9s&index=33&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`, Microsoft

The physical Web on top of the open Web and will change our lives — `Scott Jenson <https://www.youtube.com/watch?v=gV72mCdomo4&index=34&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_, Google


Some thoughts
=============

I felt really concerned by the challenges Joe and Juan raised! The Web of today has too many points of failure, Web engineers are responsible of making it better. For example, 500 attendees cannot collaborate on a document without going through servers outside the room! My grand-grand-grand children might not be able to find a picture of me on the Web! `But read this page <https://ipfs.io/#why>`_ and you'll realize this is not *only* about the future!

Both frontend and backend talks seem to agree on the fact that REST has strong limitations for high latency connections like on the mobile Web. GraphQL and Falcor are good candidates today, but will remain complementary to our usual REST/CRUD endpoints.

Google and Microsoft are following Amazon to provide a platform of nanoservices for which you don't pay when idle, and that scale on trafic peaks. A whole app can be decomposed into functions and design using internal events. Orchestration of those tiny pieces of code is another story (*for a CRUD endpoint, each verb is bound to a function*), but `Serverless <http://blog.serverless.com/defining-serverless/>`_ wants to tackle that.

Functional programming is trendy. Pure (stateless) functions scale because they can be executed anywere without context. Without side effects, it also becomes obvious to test them. They give backend developers some good pattern for highly available services, and provide the necessary constraints for immutability to frontend developers. I believe that if functional programming is not adopted as much as it could, it is not because of the paradigm and concepts, but because of the disconcerting syntax!

Angular/TypeScript was almost absent from the conference, but we could see a trend around typed languages. It really improves developer experience and reduce runtime errors in the end. With projects like Elm, developers feel safe while coding: the compiler is smart and polite, the concept of ``null`` is replaced with a notion of *maybe <type>*.

Everybody seemed to agree that JavaScript transpilation will last for a long time. The language will evolve, and we shouldn't hope for feature freeze. Plus, it really helps developers focus on modern stacks, leveraging modern features. And nowadays it is rather easy to build your app for legacy versions of JavaScript like ES5. But please, it is a bit absurd that modern browsers have to download big bundles of code full of polyfills! It would be a lot nicer if they were delivered to legacy browsers only — `<!--[if IE 10]>` oh yeah :) — or even better: as browser addons :)

The old times where we could inspect the source code of a page ­— and learn from it — is far! It is sad, but we may have to accept it because WebAssembly goes a lot further and ships code that looks closely to assembler! It's far from the Web we know, but it's still the open Web! Note that it is very different from what we knew with Java applets, a WebAssembly function can be called from a usual JS script.

The physical Web is awesome and I'm really excited about this revolution, especially how it could bring a peer-to-peer local Web, using `Web bluetooth <https://developer.mozilla.org/en-US/docs/Web/API/Web_Bluetooth_API>`_ for example. Scott told me that Mozilla approach with `FlyWeb <https://hacks.mozilla.org/2016/09/flyweb-pure-web-cross-device-interaction/>`_ is slightly different because it goes through Wifi, but both teams are in touch. The physical Web is an open project, and Google is pushing it strongly. I'm bothered by the *URL redirections* strategy though beacause it puts the redirection intermadiary in a very strong position. I believe that Google wants to be that intermediary.


Personal feedback
=================

I never attended a conference that was so close to my flat! 3min walking! It was kind of weird to meet so many prestigious IT talents in my neighbourhood! ...and so many floppy disks :)

.. image:: fullstackfest-floppydisk.jpg
    :align: center

The venue was great, and very well setup for the show (`see the introductory video clip! <https://www.youtube.com/watch?v=vxMASndC3k4&index=1&list=PLe9psSNJBf76DOOKMkDpyo_A5PfZk7JWc>`_). The coffee was not so good though.

I really enjoyed the fact that there was only **one track**. I never had to divide myself between two interesting talks, and could just sit and enjoy :)

Almost every topic resonated with the challenges we face at work. We are one of the few teams at Mozilla that do both backend and frontend, and that's awesome to feel in the same boat as the whole room of attendees. For example, we implemented some `Amazon lambda <https://amo2kinto-lambda.readthedocs.io>`_ recently, we are well aware of the frontend architecture challenges through our `Kinto-admin <https://github.com/Kinto/kinto-admin>`_, Ethan has a functional programming background in Haskell, and Nico and Mathieu `are playing with Elm <https://github.com/n1k0/kinto-elm-experiments>`_. That's why I strongly regretted that my teammates were not with me!

Also, I had the opportunity to meet Luca and Anthony from the Kuzzle team! We had a lot of fun together and our conversations about generic reusable backends were sooner insightful — c.f. `post on kinto ML <https://mail.mozilla.org/pipermail/kinto/2016-September/000197.html>`_.

Last, but not least, I would like to thank Pusher.com for organizing a hack contest using their API! They had a physical button in their booth, and I made a kind-of video booth that records the webcam when the button is pressed. I could not have won this BB8 droid without `Soledad insights on MozillaHacks <https://hacks.mozilla.org/2016/04/record-almost-everything-in-the-browser-with-mediarecorder/>`_, and I thank her again :)
